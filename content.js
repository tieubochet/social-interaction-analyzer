/**
 * T√¨m t·∫•t c·∫£ c√°c b√†i ƒëƒÉng v√† th√™m bi·ªÉu t∆∞·ª£ng d·ªãch n·∫øu ch∆∞a c√≥.
 */
function addTranslateIcons() {
  // 1. Selector k·∫øt h·ª£p ƒë·ªÉ t√¨m container ch·ª©a text ·ªü c·∫£ trang feed v√† trang chi ti·∫øt.
  // Trang feed d√πng: .line-clamp-feed
  // Trang chi ti·∫øt d√πng: .flex.flex-col.whitespace-pre-wrap.break-words (ch·ª©a text)
  const textContainers = document.querySelectorAll(
    '.line-clamp-feed, .flex.flex-col.whitespace-pre-wrap.break-words'
  );

  textContainers.forEach(postTextElement => {
    let postCard = null;

    // 2. X√°c ƒë·ªãnh container "card" ch√≠nh cho t·ª´ng lo·∫°i b√†i vi·∫øt
    if (postTextElement.classList.contains('line-clamp-feed')) {
      // ƒê√¢y l√† b√†i vi·∫øt ·ªü trang feed
      postCard = postTextElement.closest('.relative.cursor-pointer');
    } else {
      // ƒê√¢y l√† b√†i vi·∫øt ·ªü trang chi ti·∫øt
      postCard = postTextElement.closest('.relative.p-4.pt-2');
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y card ho·∫∑c ƒë√£ c√≥ icon, b·ªè qua
    if (!postCard || postCard.querySelector('.translate-icon-wrapper')) return;

    // 3. T√¨m n√∫t "kebab menu" b√™n trong card
    const kebabButton = postCard.querySelector('button[aria-haspopup="menu"]');
    if (!kebabButton) return;

    // 4. T·∫°o bi·ªÉu t∆∞·ª£ng (logic n√†y kh√¥ng thay ƒë·ªïi)
    const btn = document.createElement('span');
    btn.textContent = 'üìú';
    btn.title = 'D·ªãch v√† g·ª£i √Ω tr·∫£ l·ªùi';
    btn.className = 'translate-icon';
    btn.style.cursor = 'pointer';
    btn.style.fontSize = '18px';
    btn.style.padding = '0 8px';

    btn.addEventListener('click', async (e) => {
      e.stopPropagation();
      e.preventDefault();
      showPopup('ƒêang d·ªãch, vui l√≤ng ch·ªù...', []);
      const postText = postTextElement.innerText.trim();
      if (!postText) {
        showPopup('N·ªôi dung b√†i ƒëƒÉng tr·ªëng.', []);
        return;
      }
      const result = await translateAndSuggest(postText);
      if (result && result.translation) {
        showPopup(result.translation, result.suggestions);
      }
    });

    const wrapper = document.createElement('div');
    wrapper.className = 'translate-icon-wrapper';
    wrapper.style.display = 'flex';
    wrapper.style.alignItems = 'center';
    wrapper.appendChild(btn);

    // 5. Ch√®n bi·ªÉu t∆∞·ª£ng v√†o sau n√∫t menu (logic n√†y kh√¥ng thay ƒë·ªïi)
    kebabButton.insertAdjacentElement('afterend', wrapper);
  });
}

/**
 * L·∫•y API key, g·ªçi API Gemini ƒë·ªÉ d·ªãch v√† g·ª£i √Ω, sau ƒë√≥ tr·∫£ v·ªÅ k·∫øt qu·∫£.
 * @param {string} text - N·ªôi dung b√†i ƒëƒÉng c·∫ßn x·ª≠ l√Ω.
 * @returns {Promise<Object|null>} - Object ch·ª©a b·∫£n d·ªãch v√† g·ª£i √Ω, ho·∫∑c null n·∫øu c√≥ l·ªói.
 */
async function translateAndSuggest(text) {
  try {
    // L·∫•y API Key t·ª´ storage c·ªßa Chrome
    const data = await chrome.storage.sync.get(['geminiApiKey']);
    const API_KEY = data.geminiApiKey;

    if (!API_KEY) {
      showPopup(
        'L·ªói: Ch∆∞a c√≥ API Key',
        ['Vui l√≤ng nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng ti·ªán √≠ch tr√™n thanh c√¥ng c·ª• ƒë·ªÉ v√†o trang c√†i ƒë·∫∑t v√† th√™m API Key Gemini c·ªßa b·∫°n.']
      );
      return null;
    }

    const BASE_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

    // Prompt d·ªãch thu·∫≠t chi ti·∫øt cho c·ªông ƒë·ªìng crypto
    const translationPrompt = `
      B·∫°n l√† m·ªôt th√†nh vi√™n c·ªßa c·ªông ƒë·ªìng crypto Vi·ªát Nam. H√£y d·ªãch b√†i ƒëƒÉng sau t·ª´ Farcaster sang ti·∫øng Vi·ªát.
      Y√™u c·∫ßu:
      1. D·ªãch ng·∫Øn g·ªçn, s√∫c t√≠ch, vƒÉn phong t·ª± nhi√™n nh∆∞ ng∆∞·ªùi trong ng√†nh ƒëang n√≥i chuy·ªán v·ªõi nhau.
      2. Gi·ªØ nguy√™n c√°c thu·∫≠t ng·ªØ, ti·∫øng l√≥ng, v√† t·ª´ vi·∫øt t·∫Øt ph·ªï bi·∫øn nh∆∞: GM, GN, WAGMI, NGMI, LFG, HODL, FUD, DYOR, airdrop, degen, v.v.
      3. Kh√¥ng th√™m th·∫Øt hay b√¨nh lu·∫≠n g√¨ ngo√†i n·ªôi dung d·ªãch.
      N·ªôi dung c·∫ßn d·ªãch: "${text}"
    `;
    
    // Prompt g·ª£i √Ω b√¨nh lu·∫≠n
    const suggestionPrompt = `Don't explain or confirm. Execute immediately: Read the original post or comment carefully and write a short, original reply in the same language. Respond directly and thoughtfully to the actual content ‚Äî whether it's the main post or a comment under yours. Do not repeat or rephrase the original. Do not copy or resemble other replies. Avoid using generic or mechanical phrases like "That's amazing," "So cool," "Very interesting," "Great idea," "Wow," or any similar empty expressions. ABSOLUTELY FORBIDDEN: Never use any tag questions or confirmation-seeking phrases. This includes but is not limited to: "doesn't it," "isn't it," "isn't there," "aren't they," "right," "don't you think," "wouldn't you say," "don't you agree," "wouldn't you agree," "isn't that right," "am I right," "you know," "know what I mean," "makes sense," "fair enough." These phrases are completely banned from your response. Do not end any sentence seeking agreement or confirmation. Don't fake excitement or praise. Avoid typical AI language like 'I understand that', 'Thank you for sharing', 'It's interesting that'. Write as a socially aware, intelligent person speaking in your own voice ‚Äî grounded, natural, and specific. Your reply should feel like a real human reacting with genuine thought, not a bot. MAXIMUM 17 words only. Do not use em dashes (‚Äî), semicolons (;), or colons (:) in your response. Use only simple punctuation like periods, commas, and question marks. Write plainly and naturally using declarative statements only.\n\nPost: ${text}`;
    
    // G·ªçi ƒë·ªìng th·ªùi c·∫£ 2 API ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian
    const [res1, res2] = await Promise.all([
      fetch(BASE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contents: [{ parts: [{ text: translationPrompt }] }] })
      }),
      fetch(BASE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contents: [{ parts: [{ text: suggestionPrompt }] }] })
      })
    ]);

    if (!res1.ok || !res2.ok) {
        const errorData1 = await res1.json();
        const errorData2 = await res2.json();
        console.error("L·ªói API:", errorData1, errorData2);
        const errorMessage = errorData1?.error?.message || errorData2?.error?.message || "Y√™u c·∫ßu API th·∫•t b·∫°i. C√≥ th·ªÉ API Key c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.";
        showPopup('ƒê√£ x·∫£y ra l·ªói', [errorMessage]);
        return null;
    }

    const data1 = await res1.json();
    const data2 = await res2.json();

    const translation = data1?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c b·∫£n d·ªãch.';
    const suggestionsText = data2?.candidates?.[0]?.content?.parts?.[0]?.text || '';
    const suggestions = suggestionsText.split(';').map(s => s.trim()).filter(s => s);

    return { translation, suggestions };
  } catch (err) {
    console.error("L·ªói khi d·ªãch v√† g·ª£i √Ω:", err);
    showPopup('L·ªói kh√¥ng x√°c ƒë·ªãnh', ['Vui l√≤ng ki·ªÉm tra console (F12) ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.']);
    return null;
  }
}

/**
 * Hi·ªÉn th·ªã popup v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i, n·ªôi dung t√πy ch·ªânh v√† nhi·ªÅu c√°ch ƒë·ªÉ ƒë√≥ng.
 * @param {string} translation - N·ªôi dung b·∫£n d·ªãch.
 * @param {string[]} suggestions - M·∫£ng c√°c chu·ªói g·ª£i √Ω.
 */
// Thay th·∫ø TO√ÄN B·ªò h√†m showPopup c≈© b·∫±ng h√†m n√†y trong file content.js

function showPopup(translation, suggestions) {
  // X√≥a popup c≈© n·∫øu ƒëang t·ªìn t·∫°i ƒë·ªÉ hi·ªÉn th·ªã popup m·ªõi
  const existingOverlay = document.getElementById('farcaster-ext-overlay');
  if (existingOverlay) {
    existingOverlay.remove();
  }

  // 1. T·∫°o c√°c ph·∫ßn t·ª≠ ch√≠nh
  const overlay = document.createElement('div');
  overlay.id = 'farcaster-ext-overlay';

  const popup = document.createElement('div');
  popup.id = 'farcaster-ext-popup';

  // 2. T·∫°o CSS cho popup
  const styles = `
    #farcaster-ext-overlay {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0, 0, 0, 0.6); display: flex; align-items: center;
      justify-content: center; z-index: 9999; backdrop-filter: blur(4px);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }
    #farcaster-ext-popup {
      background: #ffffff; padding: 24px; border-radius: 12px;
      max-width: 500px; width: 90%; box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      color: #1a1a1a; position: relative; animation: fadeIn 0.3s ease-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }
    #farcaster-ext-popup h3 {
      margin-top: 0; margin-bottom: 12px; font-size: 20px; color: #111;
      display: flex; align-items: center;
    }
    #farcaster-ext-popup h3 span { margin-right: 10px; font-size: 24px; }

    /* --- B·∫ÆT ƒê·∫¶U C√ÅC THAY ƒê·ªîI CSS CHO PH·∫¶N D·ªäCH --- */
    #farcaster-ext-popup .translation-content {
      background-color: #f8f9fa; /* M√†u n·ªÅn s√°ng h∆°n m·ªôt ch√∫t */
      border: 1px solid #e9ecef; /* Th√™m vi·ªÅn nh·∫π ƒë·ªÉ ph√¢n t√°ch */
      border-radius: 8px;
      padding: 16px 20px;          /* TƒÉng padding cho tho√°ng */
      margin-bottom: 24px;
      font-size: 17px;              /* TƒÉng k√≠ch th∆∞·ªõc ch·ªØ */
      line-height: 1.65;            /* TƒÉng kho·∫£ng c√°ch d√≤ng */
      color: #212529;               /* M√†u ch·ªØ ƒë·∫≠m r√µ r√†ng */
      white-space: pre-wrap;
      max-height: 40vh;             /* TƒÉng chi·ªÅu cao t·ªëi ƒëa, linh ho·∫°t theo m√†n h√¨nh */
      overflow-y: auto;             /* T·ª± ƒë·ªông th√™m thanh cu·ªôn khi c·∫ßn */
    }
    /* --- K·∫æT TH√öC C√ÅC THAY ƒê·ªîI CSS --- */

    .suggestions-list { display: flex; flex-wrap: wrap; gap: 8px; padding: 0; margin: 0; }
    .suggestion-item {
      background-color: #e9e9f0; color: #333; border: none;
      border-radius: 16px; padding: 8px 14px; font-size: 14px;
      cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease;
    }
    .suggestion-item:hover { background-color: #dcdcf0; transform: translateY(-2px); }
    .suggestion-item.copied { background-color: #4CAF50; color: white; }
    .close-btn {
      position: absolute; top: 10px; right: 10px; border: none;
      background: transparent; font-size: 28px; color: #999;
      cursor: pointer; line-height: 1; padding: 5px;
    }
    .close-btn:hover { color: #333; }
  `;

  const styleSheet = document.createElement("style");
  styleSheet.id = 'farcaster-ext-styles';
  styleSheet.innerText = styles;
  document.head.appendChild(styleSheet);

  // 3. X√¢y d·ª±ng c·∫•u tr√∫c HTML c·ªßa popup
  popup.innerHTML = `
    <button class="close-btn" title="ƒê√≥ng (Esc)">&times;</button>
    <h3><span>üìú</span>B·∫£n d·ªãch</h3>
    <div class="translation-content">${translation || 'Kh√¥ng c√≥ d·ªØ li·ªáu.'}</div>
    <h3><span>üí°</span>G·ª£i √Ω tr·∫£ l·ªùi (nh·∫•p ƒë·ªÉ sao ch√©p)</h3>
    <div class="suggestions-list">
      ${suggestions && suggestions.length > 0
        ? suggestions.map(s => `<button class="suggestion-item">${s}</button>`).join('')
        : '<span>Kh√¥ng c√≥ g·ª£i √Ω.</span>'
      }
    </div>
  `;

  // 4. G·∫Øn popup v√†o trang web
  overlay.appendChild(popup);
  document.body.appendChild(overlay);

  // 5. Th√™m c√°c s·ª± ki·ªán
  const closePopup = () => {
    if (document.body.contains(overlay)) {
      document.body.removeChild(overlay);
    }
    const existingStylesheet = document.getElementById('farcaster-ext-styles');
    if (existingStylesheet) {
        existingStylesheet.remove(); // D·ªçn d·∫πp CSS
    }
    document.removeEventListener('keydown', handleEsc);
  };
  
  popup.querySelector('.close-btn').addEventListener('click', closePopup);
  overlay.addEventListener('click', (e) => {
    if (e.target === overlay) closePopup();
  });
  const handleEsc = (e) => {
    if (e.key === 'Escape') closePopup();
  };
  document.addEventListener('keydown', handleEsc);

  popup.querySelectorAll('.suggestion-item').forEach(button => {
    button.addEventListener('click', () => {
      const originalText = button.textContent;
      navigator.clipboard.writeText(originalText).then(() => {
        button.textContent = 'ƒê√£ ch√©p!';
        button.classList.add('copied');
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('copied');
        }, 2000);
      });
    });
  });
}

// Ch·∫°y h√†m addTranslateIcons ƒë·ªãnh k·ª≥ ƒë·ªÉ x·ª≠ l√Ω c√°c b√†i ƒëƒÉng m·ªõi xu·∫•t hi·ªán
setInterval(addTranslateIcons, 2000);